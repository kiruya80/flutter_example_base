✅ 요약 : core/ [독립적]

•	역할: 앱 전체에서 재사용 가능한 비즈니스 독립적인 공통 코드 (유틸, 공통 타입, 상수 등)
•   도메인에 종속되지 않는 공통 유틸/타입

•	예시:
    •	failure.dart, result.dart
    •	constants.dart, theme.dart
    •	extensions/, utils/
•	포함하면 좋은 것:
    •	Exception, Failure, Either, BaseViewModel
    •	BaseUiStatus, DialogController 등

lib/
├── application/
│   ├── router/
│   │   └── router_provider.dart
│   └── providers/
│       └── auth_provider.dart
├── data/
│   ├── datasources/
│   │   ├── auth_remote_datasource.dart
│   │   └── post_remote_datasource.dart
│   ├── models/
│   │   ├── user_model.dart
│   │   └── post_model.dart
│   └── repositories_impl/
│       ├── auth_repository_impl.dart
│       └── post_repository_impl.dart
├── domain/
│   ├── entities/
│   │   ├── user.dart
│   │   └── post.dart
│   ├── repositories/
│   │   ├── auth_repository.dart
│   │   └── post_repository.dart
│   └── usecases/
│       ├── login_usecase.dart
│       ├── get_posts_usecase.dart
│       └── create_post_usecase.dart
├── presentation/
│   ├── screens/
│   │   ├── login_screen.dart
│   │   ├── post_list_screen.dart
│   │   └── post_create_screen.dart
│   └── viewmodels/
│       ├── auth_viewmodel.dart
│       └── post_viewmodel.dart
└── main.dart부에서 이동할 땐 go()와 push()가 거의 동일하게 작동합니다