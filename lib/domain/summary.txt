[Domain]
lib/
├── domain/            ← 비즈니스 로직의 핵심 (순수한 Dart 코드)

domain/
├── entities/          ← 핵심 개념 (예: `Counter`, `User`, `Product`)
├── repositories/      ← 추상화된 인터페이스 (ex: `abstract CounterRepository`)
├── usecases/          ← 기능 단위의 로직 (ex: `GetCounterValue`, `IncrementCounter`)

폴더 / 설명
entities / 애플리케이션의 핵심 모델. 예: Counter { final int value; }
repositories / abstract CounterRepository 등 정의만 존재 (구현 X)
usecases / 단일 기능을 담당하는 클래스. 입력과 출력을 정의. 테스트 용이


domain/
순수 로직
Entity, UseCase, Repository interface

역할
비즈니스 로직 (순수 Dart 코드)  UseCase, Entity, Repository Interface

Provider 정의 여부
❌ 절대 정의하지 않음
Domain은 Riverpod이나 Flutter에 의존하지 않는 순수 Dart 계층이어야 하므로, Provider는 절대 들어가면 안 됩니다.


[트리구조]
entities - 데이터
repositories - repositories 추상화클래스
usecases


data
ㄴ data_sources
ㄴ models
ㄴ repositories

domain
ㄴ entities
ㄴ repositories
ㄴ usecases

presentation
ㄴ pages
ㄴ widgets
