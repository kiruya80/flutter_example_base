✅ 요약 : 외부 연동 (API, DB 등) 및 모델/구현

data/
├── data_sources/      ← 실제 데이터 원천 (API 호출, DB, shared_preferences 등)
├── models/            ← JSON ↔ 객체 변환 모델 (DTO 등)
├── repositories/      ← domain의 레포지토리 구현체

역할
외부 의존성 구현 (API, DB, Cache 등)  Repository 구현

└── data/
    ├── datasources/
    │   ├── post_api.dart              <-- ✅ API 호출 구현
    │   ├── post_api_provider.dart     <-- ✅ API provider
    │   └── post_local_db.dart         <-- ✅ 로컬 DB 접근
    └── repositories/ post_repository_impl.dart (domain/repositories/post_repository.dart에 정의된 인터페이스를 만족시키는 구현체)

✅ 1. data 계층 구성

구성 요소:
	•	models/: @JsonSerializable() 모델
	•	datasources/: API 통신 (Retrofit + Dio)
	•	repositories/: domain repository 구현
	•	exceptions/, failures/: Failure 처리

[UI] (presentation)
  ↳ postController (StateNotifier)

    ↳ useCase (domain)
      ↳ repository (domain)

        ↳ repositoryImpl (data)
          ↳ apiProvider / localDbProvider (data)

클린 아키텍처에서 data 레이어의 Model이 domain 레이어의 Entity를 **상속하는 것은 절대 추천하지 않습니다.
이는 의존성 방향 원칙(Dependency Rule)을 어기게 됩니다.

	•	domain 은 data를 몰라야 함
	•	data 는 domain에 의존 가능 (read-only)
